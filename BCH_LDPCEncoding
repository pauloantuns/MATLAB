clear;

M = 4;
data = randi([0 1], 243, 1, 'int8'); % Mensagem aleatória

% Criação de objetos de codificação e decodificação BCH
bchEncoder = comm.BCHEncoder('CodewordLength', 486, 'MessageLength', 243);
bchDecoder = comm.BCHDecoder('CodewordLength', 486, 'MessageLength', 243);

% Codificação da mensagem
encodedMsg = bchEncoder(data);

P = [
16 17 22 24 9 3 14 -1 4 2 7 -1 26 -1 2 -1 21 -1 1 0 -1 -1 -1 -1
25 12 12 3 3 26 6 21 -1 15 22 -1 15 -1 4 -1 -1 16 -1 0 0 -1 -1 -1
25 18 26 16 22 23 9 -1 0 -1 4 -1 4 -1 8 23 11 -1 -1 -1 0 0 -1 -1
9 7 0 1 17 -1 -1 7 3 -1 3 23 -1 16 -1 -1 21 -1 0 -1 -1 0 0 -1
24 5 26 7 1 -1 -1 15 24 15 -1 8 -1 13 -1 13 -1 11 -1 -1 -1 -1 0 0
2 2 19 14 24 1 15 19 -1 21 -1 2 -1 24 -1 3 -1 2 1 -1 -1 -1 -1 0
];
blockSize = 27;
pcmatrix = ldpcQuasiCyclicMatrix(blockSize,P);

cfgLDPCEnc = ldpcEncoderConfig(pcmatrix);

cfgLDPCDec = ldpcDecoderConfig(pcmatrix);

encodedData = ldpcEncode(encodedMsg,cfgLDPCEnc);

modSignal = pskmod(encodedData,M,InputType='bit');

errAWGN = canalAWGN(modSignal, M, cfgLDPCDec, bchDecoder, data);
errRayleigh = canalRayleigh(modSignal, M, cfgLDPCDec, bchDecoder, data);
errDoppler = canalDoppler(modSignal, M, cfgLDPCDec, bchDecoder, data);

fprintf("BER = %1.3f (AWGN) \n", errAWGN(1));
fprintf("BER = %1.3f (Rayleigh) \n", errRayleigh(1));
fprintf("BER = %1.3f (Doppler) \n", errDoppler(1));


%Canal AWGN
function errRate = canalAWGN(modSignal, M, cfgLDPCDec, bchDecoder, data)
    SNR = 7;
    ber = comm.ErrorRate;
    rx_awgn = awgn(modSignal,SNR);
    rx_awgnldpc = pskdemod(rx_awgn,M, 'OutputType', 'bit');
    rx_awgnbch = ldpcDecode(rx_awgnldpc, cfgLDPCDec, 10);
    rx_awgnbit = int8(~bchDecoder(rx_awgnbch));
    errRate = ber(data, rx_awgnbit);
end

%Canal Rayleigh (Multi-Caminho)
function errRate = canalRayleigh(modSignal, M, cfgLDPCDec, bchDecoder, data)
    ber = comm.ErrorRate;
    canal_rayleigh = comm.RayleighChannel("PathDelays",[-1.6e-6 1e+3], "AveragePathGains",[2 -3]);
    rx_rayleigh = canal_rayleigh(modSignal);
    rx_rayleighldpc = pskdemod(rx_rayleigh, M, 'OutputType','bit');
    rx_rayleighbch = ldpcDecode(rx_rayleighldpc, cfgLDPCDec, 10);
    rx_rayleighbit = int8(~bchDecoder(rx_rayleighbch));
    errRate = ber(data, rx_rayleighbit);
end

%Canal Rayleigh (Doppler)
function errRate = canalDoppler(modSignal, M, cfgLDPCDec, bchDecoder, data)
    ber = comm.ErrorRate;
    canal_doppler = comm.RayleighChannel('SampleRate',1e3,'MaximumDopplerShift',1e3/10,'DopplerSpectrum',doppler('Jakes'));
    rx_doppler = canal_doppler(modSignal);
    rx_dopplerldpc = pskdemod(rx_doppler, M, 'OutputType', 'bit');
    rx_dopplerbch = ldpcDecode(rx_dopplerldpc, cfgLDPCDec, 10);
    rx_dopplerbit = int8(~bchDecoder(rx_dopplerbch));
    errRate = ber(data, rx_dopplerbit);
end
